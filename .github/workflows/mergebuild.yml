name: AMI Build

on:
  pull_request:
    types:
      - closed
    branches:
        - main

jobs:
  build:
    if: github.event.pull_request.merged == true
    runs-on: ubuntu-latest
    env:
      NODE_ENV: workflow
    name: AMI Build
    
    services:
      mysql:
        image: mysql:5.7
        env:
          MYSQL_ROOT_PASSWORD: ${{ secrets.MYSQL_ROOT_PASSWORD }}
          MYSQL_DATABASE: ${{ secrets.MYSQL_DATABASE }}
        ports:
          - 3306:3306
        options: --health-cmd="mysqladmin ping" --health-interval=10s --health-timeout=5s --health-retries=3
    steps:
      - uses: actions/checkout@v3
      - uses: actions/setup-node@v3
        with:
          node-version: 20

          
      - name: Install dependencies check
        run: npm install

      - name: "Setup .env file"
        run: |
          touch .env

      - name: Run tests
        run: npm run test

      - name: Remove node modules
        run: rm -rf node_modules
        
      - name: Zip web application
        run: |
          cd ${{ github.workspace }}
          zip -r webapp.zip . -x "node_modules/*"
          ls -l
        working-directory: ${{ github.workspace }}

      - name: Setup Packer
        uses: hashicorp/setup-packer@main
        id: setup
        with:
          version: "latest"

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: us-east-2

      - name: Run Packer init
        id: init
        run: |
          packer init packer.pkr.hcl

      - name: Packer build
        run: |
            packer build -var 'source_ami=ami-06db4d78cb1d3bbf9' \
                    -var 'subnet_id=subnet-04097cdffea4849f6' \
                    -var 'instance_type=t2.micro' \
                    -var 'artifact=${{ github.workspace }}/webapp.zip' \
                    packer.pkr.hcl | tee ${{ github.workspace }}/output.txt
        working-directory: ${{ github.workspace }}

      - name: Install AWS CLI
        run: npm install -g aws-cli
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          AWS_DEFAULT_REGION: us-east-2

      - name: Extract AMI ID from Packer output
        id: extract-ami-id
        run: |
          AMI_ID=$(grep -E -o 'ami-[a-zA-Z0-9]+' output.txt | tail -n1)
          echo "AMI_ID=$AMI_ID" >> $GITHUB_ENV
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          AWS_DEFAULT_REGION: us-east-2
        
      - name: New Launch Template Version & ASG Refresh
        run: |
            if ! [[ $launch_template_id == null ]] && ! [[ $auto_scaling_name == null ]]
            then
              echo "Launch Template Found"
    
              aws ec2 create-launch-template-version \
                --launch-template-id $(aws ec2 describe-launch-templates \
                                        --query 'sort_by(LaunchTemplates, &CreateTime)[-1].LaunchTemplateId' \
                                        --output text) \
                --version-description Version2 \
                --source-version 1 \
                --launch-template-data "ImageId=$(aws ec2 describe-images \
                                                    --owners ${{ secrets.AMI_OWNER_ID}} \
                                                      --query 'sort_by(Images, &CreationDate)[-1].ImageId' \
                                                    --output text)"

                TEMPLATE_ID=$(aws ec2 describe-launch-templates --query 'LaunchTemplates[0].LaunchTemplateId' --output text)

                echo "Template ID is $TEMPLATE_ID"
                DEFAULT_ASG_NAME=$(aws autoscaling describe-auto-scaling-groups --query 'AutoScalingGroups[0].AutoScalingGroupName' --output text)
                echo "Default ASG Name is $DEFAULT_ASG_NAME"
                LATEST_VERSION=$(aws ec2 describe-launch-template-versions --launch-template-id "$TEMPLATE_ID" --versions '$Latest' --query 'LaunchTemplateVersions | sort_by(@, &VersionNumber) | [-1].VersionNumber' --output text)
                echo "LATEST VERSION: $LATEST_VERSION"
                                
              # Update the Auto Scaling Group to use the latest Launch Template version                                      
              aws autoscaling update-auto-scaling-group --auto-scaling-group-name $DEFAULT_ASG_NAME --launch-template "LaunchTemplateId=$TEMPLATE_ID,Version=$LATEST_VERSION"
                                                
              aws autoscaling start-instance-refresh \
                --auto-scaling-group-name $(aws autoscaling describe-auto-scaling-groups \
                                              --query "AutoScalingGroups[0].AutoScalingGroupName" \
                                              --output text)
                
            else
              echo "Launch Template Not Found"
            fi
    
            while [[ "$(aws autoscaling describe-instance-refreshes --auto-scaling-group-name $(aws autoscaling describe-auto-scaling-groups --query "AutoScalingGroups[0].AutoScalingGroupName" --output text) --query 'InstanceRefreshes[0].Status' --output text)" != "Successful" ]]; do
              echo "Waiting for instance refresh to complete..."
              sleep 30
            done