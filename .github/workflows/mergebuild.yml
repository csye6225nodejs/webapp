name: AMI Build

on:
  pull_request:
    types:
      - closed
    branches:
        - main

jobs:
  build:
    if: github.event.pull_request.merged == true
    runs-on: ubuntu-latest
    env:
      NODE_ENV: workflow
    name: AMI Build
    
    services:
      mysql:
        image: mysql:5.7
        env:
          MYSQL_ROOT_PASSWORD: ${{ secrets.MYSQL_ROOT_PASSWORD }}
          MYSQL_DATABASE: ${{ secrets.MYSQL_DATABASE }}
        ports:
          - 3306:3306
        options: --health-cmd="mysqladmin ping" --health-interval=10s --health-timeout=5s --health-retries=3
    steps:
      - uses: actions/checkout@v3
      - uses: actions/setup-node@v3
        with:
          node-version: 20

          
      - name: Install dependencies check
        run: npm install

      - name: "Setup .env file"
        run: |
          touch .env

      - name: Run tests
        run: npm run test

      - name: Remove node modules
        run: rm -rf node_modules
        
      - name: Zip web application
        run: |
          cd ${{ github.workspace }}
          zip -r webapp.zip . -x "node_modules/*"
          ls -l
        working-directory: ${{ github.workspace }}

      - name: Setup Packer
        uses: hashicorp/setup-packer@main
        id: setup
        with:
          version: "latest"

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: us-east-2

      - name: Run Packer init
        id: init
        run: |
          packer init packer.pkr.hcl

      - name: Packer build
        run: |
            packer build -var 'source_ami=ami-06db4d78cb1d3bbf9' \
                    -var 'subnet_id=subnet-04097cdffea4849f6' \
                    -var 'instance_type=t2.micro' \
                    -var 'artifact=${{ github.workspace }}/webapp.zip' \
                    packer.pkr.hcl | tee ${{ github.workspace }}/output.txt
        working-directory: ${{ github.workspace }}

      - name: Install AWS CLI
        run: npm install -g aws-cli
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          AWS_DEFAULT_REGION: us-east-2

      - name: Extract AMI ID from Packer output
        id: extract-ami-id
        run: |
          AMI_ID=$(grep -E -o 'ami-[a-zA-Z0-9]+' output.txt | tail -n1)
          echo "AMI_ID=$AMI_ID" >> $GITHUB_ENV
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          AWS_DEFAULT_REGION: us-east-2

      - name: Debug AWS Credentials
        run: |
          echo "AWS_ACCESS_KEY_ID: $AWS_ACCESS_KEY_ID"
          echo "AWS_SECRET_ACCESS_KEY: $AWS_SECRET_ACCESS_KEY"
          aws configure list
        
          

      - name: Get Existing Launch Template ID
        id: get-launch-template-id
        run: |
          # List all Launch Templates and extract the first one (you may adjust the logic as needed)
          TEMPLATE_ID=$(aws ec2 describe-launch-templates --query 'LaunchTemplates[0].LaunchTemplateId' --output text)
          echo "::set-output name=template-id::$TEMPLATE_ID"
        env:
            AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
            AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
            AWS_DEFAULT_REGION: us-east-2
        

      - name: Get Current Template Version
        id: get-current-template-version
        run: |
          TEMPLATE_ID="${{ steps.get-launch-template-id.outputs.template-id }}"
          CURRENT_VERSION=$(aws ec2 describe-launch-template-versions --launch-template-id $TEMPLATE_ID --query 'LaunchTemplateVersions[0].VersionNumber' --output text)
          echo "::set-output name=current-version::$CURRENT_VERSION"
        env:
            AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
            AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
            AWS_DEFAULT_REGION: us-east-2

      - name: Update Launch Template
        run: |
            TEMPLATE_ID="${{ steps.get-launch-template-id.outputs.template-id }}"
            CURRENT_VERSION="${{ steps.get-current-template-version.outputs.current-version }}"
            aws ec2 create-launch-template-version --launch-template-id $TEMPLATE_ID --version-description "Update AMI" --cli-input-json "$(jq -n --arg imageId "$AMI_ID" --arg currentVersion "$CURRENT_VERSION" '{LaunchTemplateData: {ImageId: $imageId}, VersionDescription: "Update AMI", SourceVersion: $currentVersion}')"
        env:
              AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
              AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
              AWS_DEFAULT_REGION: us-east-2

      - name: Get Auto Scaling Group Name
        id: get-asg-name
        run: |
            ASG_NAME="web-autoscaling-group"
            echo "::set-output name=asg-name::$ASG_NAME"
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          AWS_DEFAULT_REGION: us-east-2

      - name: Update Auto Scaling Group
        run: |
          aws autoscaling update-auto-scaling-group \
          --auto-scaling-group-name YourAutoScalingGroupName \
          --launch-template LaunchTemplateName=MyLaunchTemplate,Version=2
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          AWS_DEFAULT_REGION: us-east-2

      - name: Start instance refresh
        run: |
          aws autoscaling start-instance-refresh \
          --auto-scaling-group-name $(aws autoscaling describe-auto-scaling-groups \
          --query "AutoScalingGroups[0].AutoScalingGroupName" \
          --output text)

          while [[ "$(aws autoscaling describe-instance-refreshes --auto-scaling-group-name $(aws autoscaling describe-auto-scaling-groups --query "AutoScalingGroups[0].AutoScalingGroupName" --output text) --query 'InstanceRefreshes[0].Status' --output text)" != "Successful" ]]; do
            echo "Waiting for instance refresh to complete..."
            sleep 30
          done
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          AWS_DEFAULT_REGION: us-east-2

